var webpack = require('webpack');

var path = require('path');

var _root = path.resolve(__dirname);
function root(args) {
	return path.join( _root, args);
}

// Load the config generated by scalajs-bundler
var config = require('./scalajs.webpack.config');

config.optimization = config.optimization || {}
config.optimization.minimize = false
config.mode = 'development'

// gets rid of error
//    ModuleNotFoundError: Module not found: Error: Can't resolve 'fs' in
config.node = {
	fs: 'empty'
}

// gets rid of warning
//   (Emitted value instead of an instance of Error) Cannot find source file '../src/validateWithCustomRules.ts': Error: Can't resolve
config.module = config.module || {}
config.module.rules = config.module.rules || []
if (config.module.rules.length == 1
    && config.module.rules[0].test.source == "\\.js$"
  ) {
    config.module.rules[0].exclude = [
      // instead of /\/node_modules\//
      path.join(process.cwd(), 'node_modules')
    ]
  } else {
    config.module.rules.push(
      {
        test: /\.js$/,
        enforce: "pre",
        use: "source-map-loader",
        exclude: [
          // instead of /\/node_modules\//
          path.join(process.cwd(), 'node_modules')
        ]
      }
    )
  }

console.warn( "config.module.rules is ", config.module.rules )

// this suppresses the warning
//    Critical dependency: the request of a dependency is an expression
// config.module.exprContextCritical = false

module.exports = config;
